from shutil import copyfile
from pathlib import Path

from w3nest.ci.ts_frontend import (
    ProjectConfig,
    PackageType,
    Dependencies,
    RunTimeDeps,
    DevServer,
    Bundles,
    MainModule,
    generate_template,
)

from w3nest.utils import parse_json

project_folder = Path(__file__).parent.parent

pkg_json = parse_json(project_folder / "package.json")

externals_deps = {
    "rxjs": "^7.8.2",
    "rx-vdom": "^0.1.7",
    "mkdocs-ts": "^0.5.3",
    "@mkdocs-ts/notebook": "^0.1.5",
    "@w3nest/webpm-client": "^0.1.12",
    "@w3nest/ui-tk": "^0.1.8",
    "mathjax": "^3.1.4",
}

in_bundle_deps = {}
dev_deps = {
    # Only for type definition
    "@mkdocs-ts/code-api": "^0.2.3",
}

config = ProjectConfig(
    path=project_folder,
    type=PackageType.APPLICATION,
    name=pkg_json["name"],
    version=pkg_json["version"],
    shortDescription=pkg_json["description"],
    author=pkg_json["author"],
    dependencies=Dependencies(
        runTime=RunTimeDeps(externals=externals_deps, includedInBundle=in_bundle_deps),
        devTime=dev_deps,
    ),
    bundles=Bundles(
        mainModule=MainModule(
            entryFile="./app/main.ts",
            loadDependencies=[
                "rxjs",
                "rx-vdom",
                "mkdocs-ts",
                "@mkdocs-ts/notebook",
                "@w3nest/webpm-client",
                "@w3nest/ui-tk/Mkdocs",
                "@w3nest/ui-tk/Badges",
                "mathjax",
            ],
        ),
    ),
    devServer=DevServer(port=3023),
    inPackageJson={
        "scripts": {"doc": "npx tsx .w3nest/doc.ts"},
    },
)

template_folder = Path(__file__).parent / ".template"

generate_template(config=config, dst_folder=template_folder)

files = [
    ".gitignore",
    "README.md",
    "package.json",
    # "tsconfig.json", ignore src/chapters
    "jest.config.ts",
    "webpack.config.ts",
    "typedoc.js",
]
for file in files:
    copyfile(src=template_folder / file, dst=project_folder / file)


# Generate `contribute-file-contents.ts`

from pathlib import Path

source_folder = project_folder / "src" / "chapters" / "template"
# Mapping of output variable names -> source file paths
FILES = {
    "templateSetupPy": source_folder / ".w3nest/setup.py",
    "templateIndexTs": source_folder / "src" / "lib" / "index.ts",
    "templateConfigMarkdownTs": source_folder / "src" / "lib" / "config.markdown.ts",
    "templateConfigNotebookTs": source_folder / "src" / "lib" / "config.notebook.ts",
    "templateLinksTs": source_folder / "src" / "lib" / "links.ts",
}

OUTPUT_FILE = project_folder / "src" / "app" / "contribute-file-contents.ts"


def escape_backticks(content: str) -> str:
    """Escape backticks for embedding inside template literals."""
    return content.replace("`", "\\`").replace("$", "\$")


out_lines = []

for export_name, file_path in FILES.items():
    path = Path(file_path)
    if not path.exists():
        print(f"⚠️ Skipping missing file: {file_path}")
        continue

    content = path.read_text(encoding="utf-8")
    escaped = escape_backticks(content)

    out_lines.append(f"export const {export_name} = `\n{escaped}\n`\n")

Path(OUTPUT_FILE).write_text("\n".join(out_lines), encoding="utf-8")
print(f"✅ Generated {OUTPUT_FILE}")


# Generate `chapters.ts`

import json
from pathlib import Path

CHAPTERS_DIR = project_folder / "src" / "chapters"
OUTPUT_FILE = project_folder / "src" / "app" / "chapters.ts"

HEADER = """// -----------------------------------------------------------------------------
// ⚠️ AUTO-GENERATED FILE
// This file is generated by a script. Do not edit manually.
// Instead, modify the package.json files under /src/chapters
// and re-run the generator.
// -----------------------------------------------------------------------------
"""

if not CHAPTERS_DIR.exists():
    raise FileNotFoundError(f"❌ Directory not found: {CHAPTERS_DIR}")

mappings = {}

# Loop over subfolders in src/chapters
for folder in CHAPTERS_DIR.iterdir():
    if not folder.is_dir():
        continue

    pkg_file = folder / "package.json"
    if not pkg_file.exists():
        print(f"⚠️ Skipping {folder} (no package.json)")
        continue

    # Load package.json
    with pkg_file.open(encoding="utf-8") as f:
        pkg = json.load(f)

    name = pkg.get("name")
    version = pkg.get("version")

    if not name or not version:
        print(f"⚠️ Skipping {folder} (missing name/version in package.json)")
        continue
    nav_id = name.split("/")[-1]
    mappings[nav_id] = f"{name}#^{version}"

# Generate TS file content
lines = [HEADER, "export const chapterInputs = {"]
for key, val in mappings.items():
    lines.append(f"    '{key}': '{val}',")
lines.append("}")
content = "\n".join(lines) + "\n"

OUTPUT_FILE.write_text(content, encoding="utf-8")
print(f"✅ Generated {OUTPUT_FILE}")
